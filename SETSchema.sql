DROP TABLE IF EXISTS BOOKING;
DROP TABLE IF EXISTS CUSTOMER;
DROP TABLE IF EXISTS AGENT;

-- Set time style to DD/MM/YYYY --
-- (Since at the back it is something like 07/06/2021) --
SET datestyle = DMY;

CREATE TABLE AGENT
(
	AGENTID SERIAL PRIMARY KEY,
	USERNAME VARCHAR(20) NOT NULL UNIQUE,
	FIRSTNAME VARCHAR(50) NOT NULL, 
	LASTNAME VARCHAR(50) NOT NULL,
	PASSWORD VARCHAR(20) NOT NULL
);

INSERT INTO AGENT (USERNAME,FIRSTNAME,LASTNAME,PASSWORD) VALUES ('-','N/A','','111');
INSERT INTO AGENT (USERNAME,FIRSTNAME,LASTNAME,PASSWORD) VALUES ('novak','Novak','Djokovic','222');
INSERT INTO AGENT (USERNAME,FIRSTNAME,LASTNAME,PASSWORD) VALUES ('jeff','Jeff','Alexander','333');
INSERT INTO AGENT (USERNAME,FIRSTNAME,LASTNAME,PASSWORD) VALUES ('marie','Mariana','Johnson','444');
INSERT INTO AGENT (USERNAME,FIRSTNAME,LASTNAME,PASSWORD) VALUES ('xing','Xing','Xing','555');

CREATE TABLE CUSTOMER
(
	EMAIL VARCHAR(50) PRIMARY KEY,
	FIRSTNAME VARCHAR(50) NOT NULL,
	LASTNAME VARCHAR(50) NOT NULL,
	-- check user email is legal -- 
	CONSTRAINT valid_email CHECK (EMAIL ~ '^[A-Za-z0-9.%_-|,+*&^$#]+@[A-Za-z0-9]+[.][A-Za-z]+$')  
);

INSERT INTO CUSTOMER (EMAIL,FIRSTNAME,LASTNAME) VALUES ('bobsmith11@gmail.com','Bob','Smith');
INSERT INTO CUSTOMER (EMAIL,FIRSTNAME,LASTNAME) VALUES ('abrown87@outlook.com','Anthony','Brown');
INSERT INTO CUSTOMER (EMAIL,FIRSTNAME,LASTNAME) VALUES ('ruby.m5@gmail.com','Ruby','Miller');
INSERT INTO CUSTOMER (EMAIL,FIRSTNAME,LASTNAME) VALUES ('woodp88@yahoo.com','Peter','Wood');
INSERT INTO CUSTOMER (EMAIL,FIRSTNAME,LASTNAME) VALUES ('m.clark12@gmail.com','Mia','Clark');
INSERT INTO CUSTOMER (EMAIL,FIRSTNAME,LASTNAME) VALUES ('jamie_ol@gmail.com','Jamie','Oliver');
INSERT INTO CUSTOMER (EMAIL,FIRSTNAME,LASTNAME) VALUES ('anny@gmail.com','Anny','Wong');


CREATE TABLE BOOKING 
(
	BOOKING_NO SERIAL PRIMARY KEY,
	CUSTOMER VARCHAR(50) NOT NULL REFERENCES CUSTOMER,
	PERFORMANCE VARCHAR(100) NOT NULL,
	PERFORMANCE_DATE DATE NOT NULL,
	BOOKED_BY INTEGER NOT NULL REFERENCES AGENT,
	INSTRUCTION VARCHAR(200),
	-- booking performing time have to be in the future --
	CONSTRAINT valid_performance_time CHECK (PERFORMANCE_DATE > now())
);

INSERT INTO BOOKING (CUSTOMER,PERFORMANCE,PERFORMANCE_DATE,BOOKED_BY,INSTRUCTION) values ('bobsmith11@gmail.com','The Lion King','05/06/2021',2,'I''d like to book 3 additional seats');
INSERT INTO BOOKING (CUSTOMER,PERFORMANCE,PERFORMANCE_DATE,BOOKED_BY,INSTRUCTION) values ('abrown87@outlook.com','Romeo & Juliet','11/07/2021',4,'Please cancel 1 seat from my booking');
INSERT INTO BOOKING (CUSTOMER,PERFORMANCE,PERFORMANCE_DATE,BOOKED_BY,INSTRUCTION) values ('ruby.m5@gmail.com','Death of a Salesman','27/06/2021',2,'I want to add meals to my booking');
INSERT INTO BOOKING (CUSTOMER,PERFORMANCE,PERFORMANCE_DATE,BOOKED_BY,INSTRUCTION) values ('woodp88@yahoo.com','The Lion King','05/06/2021',3,'Can you please waitlist 4 seats?');
INSERT INTO BOOKING (CUSTOMER,PERFORMANCE,PERFORMANCE_DATE,BOOKED_BY,INSTRUCTION) values ('m.clark12@gmail.com','Disney''s Frozen','18/07/2021',2,'Please upgrade my seats to Box Seats');
INSERT INTO BOOKING (CUSTOMER,PERFORMANCE,PERFORMANCE_DATE,BOOKED_BY,INSTRUCTION) values ('jamie_ol@gmail.com','Julius Caesar','07/08/2021',1,'');

-- TOOLs or TRIGGERs --
-- switch agent name to booked_by for updates -- 
CREATE OR REPLACE FUNCTION get_booked_by(agent_name VARCHAR(100))
	RETURNS INTEGER AS $$
 	DECLARE
	val INTEGER;
BEGIN
	SELECT AGENTID INTO val FROM AGENT WHERE username = agent_name LIMIT 1;
	IF val is NULL 
		THEN RAISE EXCEPTION 'agent doesnt exists';
	END IF;
	return val;
END;
$$ LANGUAGE plpgsql;

commit;


